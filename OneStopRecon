#!/bin/bash

PathDir="$(pwd)"
. "$PathDir"/functionLibrary.sh
. "$PathDir"/helpMenu.sh
. "$PathDir"/util.sh


counter=0
while [ "$#" -gt 0 ]; do
	selectedTool=$1
	helpTest="$(echo $selectedTool | /usr/bin/cut -c 1-6)"
	helpTool="$(echo $selectedTool | /usr/bin/cut -c 8-30)"
	counter=$((counter+1))
	if [[ "$counter" == 1 ]]; then
		if [[ "$selectedTool" == "-f" ]] || [[ "$selectedTool" == "-o" ]]; then
			doNotRunWarning="YES"
			break
		fi	
	else
		case $selectedTool in
			"-b")
				chosenTool="bannerGrabbing"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dB")
				chosenTool="bingDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dD")
				chosenTool="duckDuckGoDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dG")
				chosenTool="googleDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-M")
				chosenTool="metadataExtraction"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-m")
				chosenTool="googleMaps"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-n")
				chosenTool="dnsEnumeration"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-s")
				chosenTool="shodan"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi				
				;;
			"-t")
				chosenTool="txtFileChecks"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi					
				;;
			"-w")
				chosenTool="whoIs"
				#Check if reading from file
				if [[ "$2" == "-f" ]]; then
					shift
				else
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-f")
				readFromFile="YES"
				fileToRead="$2"
				shift
				shift
				;;
			"-o")
				saveToFile="YES"
				fileToSaveTo="$2"
				shift
				shift
				;;
			"-u")
				chosenTool="usernameGenerator"
				if [ "$2" == "-f" ]; then
					shift
				else
					firstArgForTool="$2"
					secondArgForTool="$3"
					thirdArgForTool="$4"
					shift
					shift
					shift
					shift
				fi
				;;
			#"--help")
			#		displayHelp=YES
			#	helpFunc="$helpTool"
			#	shift
			#	;;
			"-gD")
				chosenTool="gobusterDir"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gN")
				chosenTool="gobusterDNS"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gV")
				chosenTool="gobusterVHost"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gF")
				chosenTool="gobusterFuzz"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			*)
				if [[ "$helpTest" == "--help" ]]; then
					displayHelp=YES
					helpFunc="$helpTool"
					shift
				else
					echo "Unkown error $chosenTool"
					doNotRunWarning="YES"
					shift
				fi
		esac
	fi
done

#Main execution flow for v2.0 below here
if [[ "$displayHelp" == "YES" ]]; then
	if [[ "$helpFunc" == "" ]]; then
		echo "[*] Printing help summary for OneStopRecon"
		helpSummary
	elif [[ "$helpFunc" == "bannerGrab" ]]; then
		echo "[*] Printing detailed help for Banner Grabbing module"
		bannerGrabHelp
	elif [[ "$helpFunc" == "dorking" ]]; then
		echo "[*] Printing detailed help for Dorking module"
		dorkingHelp
	elif [[ "$helpFunc" == "dnsEnumeration" ]]; then	
		echo "[*] Printing detailed help for Name Server Enumeration module"
		dnsHelp
	elif [[ "$helpFunc" == "goBuster" ]]; then	
		echo "[*] Printing detailed help for Go Buster module"
		gobusterHelp
	elif [[ "$helpFunc" == "googleMaps" ]]; then
		echo "[*] Printing detailed help for Google Maps module"
		googleMapsHelp
	elif [[ "$helpFunc" == "metadata" ]]; then	
		echo "[*] Printing detailed help for Metadata Extraction module"
		metadataExtractHelp
	elif [[ "$helpFunc" == "searchsploit" ]]; then
		echo "[*] Printing detailed help for Searchsploit module"	
		searchSploitHelp
	elif [[ "$helpFunc" == "shodan" ]]; then
		echo "[*] Printing detailed help for Shodan module"
		shodanHelp
	elif [[ "$helpFunc" == "socialMedia" ]]; then	
		echo "[*] Printing detailed help for Social Media Discovery"
		socialMediaHelp
	elif [[ "$helpFunc" == "textFileChecks" ]]; then	
		echo "[*] Printing detailed help for Text File Check module"
		txtCheckHelp
	elif [[ "$helpFunc" == "usernameGen" ]]; then	
		echo "[*] Printing detailed help for Username Generation module"
		usernameGenHelp
	elif [[ "$helpFunc" == "whoIs" ]]; then	
		echo "[*] Printing detailed help for WhoIs module"
		whoIsHelp
	else
		echo -e "[!] Warning: The help option you specified does not exist, for a brief summary use \"--help\""
		defaultHelp
	fi 
elif [[ "$doNotRunWarning" == "YES" ]]; then
	echo "[!] Warning: A tool must be specified before utilies"
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#All tools listed below, same execution flow as version 1.0 but with util functions incorporated
	if [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool"
	elif [[ $chosenTool == "bingDorking" ]]; then
		dorking.sh "-dB" "$argForTool"
	elif [[ $chosenTool == "duckDuckGoDorking" ]]; then
		"$PathDir"/dorking.sh "-dD" "$argForTool"
	elif [[ $chosenTool == "googleDorking" ]]; then
		dorking.sh -dG "$argForTool"
	elif [[ $chosenTool == "gobusterDir" ]]; then
		echo "target is $gobusterTarget"
		echo "wordList is $gobusterWordList"
		gobusterUtil "dir" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterDNS" ]]; then
		gobusterUtil "dns" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterVHost" ]]; then
		gobusterUtil "vhost" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterFuzz" ]]; then
		gobusterUtil "fuzz" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool"
	elif [[ $chosenTool == "googleMaps" ]]; then
		googleMaps "$argForTool"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool"
	elif [[ $chosenTool == "shodan" ]]; then
		shodanFunc "$argForTool"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool"
	elif [[ $chosenTool == "whoIs" ]]; then
		whoisUtil "$argForTool"
	elif [[ $chosenTool == "usernameGenerator" ]]; then
		usernameUtil "$firstArgForTool" "$secondArgForTool" "$thirdArgForTool"
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#Only the tools listed below can read from a file
	if [[ $chosenTool == "whoIs" ]]; then
		whoisUtil "$fileToRead"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$fileToRead"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$fileToRead"
	else 
		#echo "[!] The specified module cannot take input from a file"
		echo "[!] The specified module cannot be output to a file"
		echo "[*] To use the specified module, enter one command line argument"
		echo "[*] For help, enter \"--help\""
	fi
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" == "YES" ]];then
	#Only the tools listed below can save/write to a file
	if [[ "$chosenTool" == "whoIs" ]]; then
		whoisUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "usernameGenerator" ]]; then	
		usernameUtil "$firstArgForTool" "$secondArgForTool" "$thirdArgForTool" "$fileToSaveTo"
	elif [[ $chosentool == "gobusterDir" ]]; then
		gobusterUtil "dir" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterDNS" ]]; then
		gobusterUtil "dns" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterVHost" ]]; then
		gobusterUtil "vhost" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterFuzz" ]]; then
		gobusterUtil "fuzz" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	else
		#echo "[!] The specified module cannot be output to a file"
		echo "[!] The specified module cannot take input from a file"
		echo "[*] To use the specified module, remove the \"-o\" command line option"
	    echo "[*] For help, enter \"--help\""
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" == "YES" ]]; then
	#Tools listed below can read from and save to files
	if [[ "$chosenTool" == "whoIs" ]]; then
		whoisUtil "$fileToRead" "$fileToSaveTo"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool" "$fileToSaveTo"
	else
		echo "[!] The specified module cannot be combined with either \"-f\" or \"-o\" command line utilities"
		echo "[*] To use the specified module, remove all utility command line switches"
	    echo "[*] For help, enter \"--help\""
	fi
fi
