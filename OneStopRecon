#!/bin/bash

PathDir="$(pwd)"
. "$PathDir"/functionLibrary.sh
. $PathDir/util.sh


counter=0
while [ "$#" -gt 0 ]; do
	selectedTool=$1
	#echo $selectedTool
	counter=$((counter+1))
	if [[ "$counter" == 1 ]]; then
		if [[ "$selectedTool" == "-f" ]] || [[ "$selectedTool" == "-o" ]]; then
			doNotRunWarning="YES"
			break
		fi	
	else
		case $selectedTool in
			"-b")
				chosenTool="bannerGrabbing"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dB")
				chosenTool="bingDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dD")
				chosenTool="duckDuckGoDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-dG")
				chosenTool="googleDorking"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-M")
				chosenTool="metadataExtraction"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-m")
				chosenTool="googleMaps"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-n")
				chosenTool="dnsEnumeration"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-s")
				chosenTool="shodan"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi				
				;;
			"-t")
				chosenTool="txtFileChecks"
				if [[ "$2" == "-f" ]]; then
					shift
				else	
					argForTool="$2"
					shift
					shift
				fi					
				;;
			"-w")
				chosenTool="whoIs"
				#Check if reading from file
				if [[ "$2" == "-f" ]]; then
					shift
				else
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-f")
				readFromFile="YES"
				fileToRead="$2"
				shift
				shift
				;;
			"-o")
				saveToFile="YES"
				fileToSaveTo="$2"
				shift
				shift
				;;
			"-u")
				chosenTool="usernameGenerator"
				if [ "$2" == "-f" ]; then
					shift
				else
					firstArgForTool="$2"
					secondArgForTool="$3"
					thirdArgForTool="$4"
					shift
					shift
					shift
					shift
				fi
				;;
			"--help")
				displayHelp=YES
				shift
				;;
			"-gD")
				chosenTool="gobusterDir"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gN")
				chosenTool="gobusterDNS"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gV")
				chosenTool="gobusterVHost"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			"-gF")
				chosenTool="gobusterFuzz"
				if [ "$2" == "-f" ]; then
					shift
				else
					gobusterTarget="$2"
					gobusterWordList="$3"
					shift
					shift
					shift
				fi
				;;
			*)
				echo "Unkown error $chosenTool"
				doNotRunWarning="YES"
				shift
				;;
		esac
	fi
done

#Help function  to display usages
menu_help () {
        echo -e "========================================================================================================================================"
       echo -e "" \                      "\t\t\t\t\t\t  ___             ____  _              ____                      \n" \
                                         "\t\t\t\t\t\t / _ \ _ __   ___/ ___|| |_ ___  _ __ |  _ \ ___  ___ ___  _ __  \n" \
                                         "\t\t\t\t\t\t| | | | '_ \ / _ \___ \| __/ _ \| '_ \| |_) / _ \/ __/ _ \| '_ \ \n" \
                                         "\t\t\t\t\t\t| |_| | | | |  __/___) | || (_) | |_) |  _ <  __/ (_| (_) | | | |\n" \
                                         "\t\t\t\t\t\t \___/|_| |_|\___|____/ \__\___/| .__/|_| \_\___|\___\___/|_| |_|\n" \
                                         "\t\t\t\t\t\t                                |_|                              \n" \
					 ""
        echo -e "========================================================================================================================================"

        echo -e "\n"
        echo -e " -b  | --Banner Grabbing \t\tGain details about a system on a network\t\t\t\t[Semi-Passive]"
	echo -e " -dB | --Dorking \t\t\tRun popular dorking searches using Bing search engine\t\t\t[Passive]"
        echo -e " -dD | --Dorking \t\t\tRun popular dorking searches using Duck Duck Go search engine\t\t[Passive]"
        echo -e " -dG | --Dorking \t\t\tRun popular dorking searches using Google search engine\t\t\t[Passive]"
        echo -e " -M  | --MetaDataExtractor\t\tExracts data from files\t\t\t\t\t\t\t[Passive]"
        echo -e " -m  | --Google Map Request\t\tOpens google map to inputted location\t\t\t\t\t[Passive]"
        echo -e " -n  | --Name Server Enumeration \tLocating all DNS servers and records for a company\t\t\t[Semi-Passive]"
        echo -e " -s  | --Shodan  \t\t\tIoT devices check\t\t\t\t\t\t\t[Passive]"
        echo -e " -t  | --Text file recon \t\tChecks for intel in Robots.txt & Security.txt of domain\t\t\t[Passive]"
	echo -e " -u  | --Username Generator \t\t Generate usernames for a user of a domain \t\t\t[Passive]"
        echo -e " -w  | --Whois \t\t\t\tWhois URL check\t\t\t\t\t\t\t\t[Passive]"
}

#Main execution flow for v2.0 below here
if [[ "$displayHelp" == "YES" ]]; then
	menu_help
elif [[ "$doNotRunWarning" == "YES" ]]; then
	echo "[!] Warning: A tool must be specified before utilies"
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#All tools listed below, same execution flow as version 1.0 but with util functions incorporated
	if [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool"
	elif [[ $chosenTool == "bingDorking" ]]; then
		dorking.sh "-dB" "$argForTool"
	elif [[ $chosenTool == "duckDuckGoDorking" ]]; then
		"$PathDir"/dorking.sh "-dD" "$argForTool"
	elif [[ $chosenTool == "googleDorking" ]]; then
		dorking.sh -dG "$argForTool"
	elif [[ $chosenTool == "gobusterDir" ]]; then
		echo "target is $gobusterTarget"
		echo "wordList is $gobusterWordList"
		gobusterUtil "dir" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterDNS" ]]; then
		gobusterUtil "dns" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterVHost" ]]; then
		gobusterUtil "vhost" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "gobusterFuzz" ]]; then
		gobusterUtil "fuzz" "$gobusterTarget" "$gobusterWordList"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool"
	elif [[ $chosenTool == "googleMaps" ]]; then
		googleMaps "$argForTool"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool"
	elif [[ $chosenTool == "shodan" ]]; then
		shodanFunc "$argForTool"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool"
	elif [[ $chosenTool == "whoIs" ]]; then
		whoisUtil "$argForTool"
	elif [[ $chosenTool == "usernameGenerator" ]]; then
		usernameUtil "$firstArgForTool" "$secondArgForTool" "$thirdArgForTool"
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#Only the tools listed below can read from a file
	if [[ $chosenTool == "whoIs" ]]; then
		whoisUtil "$fileToRead"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$fileToRead"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$fileToRead"
	else 
		echo "[!] The specified module cannot take input from a file"
		echo "[*] To use the specified module, enter one command line argument"
		echo "[*] For help, enter \"--help\""
	fi
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" == "YES" ]];then
	#Only the tools listed below can save/write to a file
	if [[ "$chosenTool" == "whoIs" ]]; then
		whoisUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "usernameGenerator" ]]; then	
		usernameUtil "$firstArgForTool" "$secondArgForTool" "$thirdArgForTool" "$fileToSaveTo"
	elif [[ $chosentool == "gobusterDir" ]]; then
		gobusterUtil "dir" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterDNS" ]]; then
		gobusterUtil "dns" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterVHost" ]]; then
		gobusterUtil "vhost" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	elif [[ $chosenTool == "gobusterFuzz" ]]; then
		gobusterUtil "fuzz" "$gobusterTarget" "$gobusterWordList" "$fileToSaveTo"
	else
		echo "[!] The specified module cannot be output to a file"
		echo "[*] To use the specified module, remove the \"-o\" command line option"
	       	echo "[*] For help, enter \"--help\""
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" == "YES" ]]; then
	#Tools listed below can read from and save to files
	if [[ "$chosenTool" == "whoIs" ]]; then
		whoisUtil "$fileToRead" "$fileToSaveTo"
	elif [[ $chosenTool == "txtFileChecks" ]]; then
		txtFileUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "dnsEnumeration" ]]; then
		dnsUtil "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "metadataExtraction" ]]; then
		metadataExtraction "$argForTool" "$fileToSaveTo"
	elif [[ $chosenTool == "bannerGrabbing" ]]; then
		bannerGrab "$argForTool" "$fileToSaveTo"
	else
		echo "[!] The specified module cannot be combined with either \"-f\" or \"-o\" command line utilities"
		echo "[*] To use the specified module, remove all utility command line switches"
	       	echo "[*] For help, enter \"--help\""
	fi
fi
