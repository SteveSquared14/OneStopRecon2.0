#!/bin/bash

PathDir="$(pwd)"
. $PathDir/dorking.sh
. $PathDir/functionLibrary.sh
. $PathDir/util.sh


function checkReadFile(){
	if [ "$2" == "-f" ]; then
		#chosenTool="bannerGrabbing"
		argForTool="None"
		#readFromFile="YES"
		#fileToRead="$3"
		#shift	
	else
		argForTool="$2"
		#shift
		#shift
	fi	
}



counter=0
while [ "$#" -gt 0 ]; do
	selectedTool=$1
	counter=$((counter+1))
	if [[ "$counter" == 1 ]]; then
		if [[ "$selectedTool" == "-f" ]] || [[ "$selectedTool" == "-o" ]]; then
			doNotRunWarning="YES"
			break
		fi
	#elif [ "$2" == "-f" ]; then
	#		chosenTool="bannerGrabbing"
	#		argForTool="None"
	#		readFromFile="YES"
	#		fileToRead="$3"	
	else
		case $selectedTool in
			"-b")
				chosenTool="bannerGrabbing"
				argForTool="$2"
				shift
				shift
				;;
			"-dB")
				chosenTool="bingDorking"
				argForTool="$2"
				shift
				shift
				;;
			"-dD")
				chosenTool="duckDuckGoDorking"
				argForTool="$2"
				shift
				shift
				;;
			"-dG")
				chosenTool="googleDorking"
				argForTool="$2"
				shift
				shift
				;;
			"-M")
				chosenTool="metadataExtract"
				argForTool="$2"
				shift
				shift
				;;
			"-m")
				chosenTool="googleMaps"
				argForTool="$2"
				shift
				shift
				;;
			"-n")
				chosenTool="dnsEnumeration"
				argForTool="$2"
				shift
				shift
				;;
			"-s")
				chosenTool="shodan"
				argForTool="$2"
				shift
				shift
				;;
			"-t")
				chosenTool="txtFileChecks"
				argForTool="$2"
				shift
				shift
				;;
			"-w")
				#checkReadFile
				chosenTool="whoIs"
				if [[ "$2" == "-f" ]]; then
					argForTool="None"
					shift
				else
					argForTool="$2"
					shift
					shift
				fi
				;;
			"-f")
				readFromFile="YES"
				fileToRead="$2"
				shift
				shift
				;;
			"-o")
				saveToFile="YES"
				fileToSaveTo="$2"
				shift
				shift
				;;
			*)
				echo "Unkown error $chosenTool"
				doNotRunWarning="YES"
				shift
				;;
		esac
	fi
done

#Help function  to display usages
menu_help () {
        echo -e "========================================================================================================================================"
       echo -e "" \                      "\t\t\t\t\t\t  ___             ____  _              ____                      \n" \
                                         "\t\t\t\t\t\t / _ \ _ __   ___/ ___|| |_ ___  _ __ |  _ \ ___  ___ ___  _ __  \n" \
                                         "\t\t\t\t\t\t| | | | '_ \ / _ \___ \| __/ _ \| '_ \| |_) / _ \/ __/ _ \| '_ \ \n" \
                                         "\t\t\t\t\t\t| |_| | | | |  __/___) | || (_) | |_) |  _ <  __/ (_| (_) | | | |\n" \
                                         "\t\t\t\t\t\t \___/|_| |_|\___|____/ \__\___/| .__/|_| \_\___|\___\___/|_| |_|\n" \
                                         "\t\t\t\t\t\t                                |_|                              \n" \
					 ""
        echo -e "========================================================================================================================================"

        echo -e "\n"
        #echo -e "\t-e|--Exploit-DB \t\tVulnerability checker\t\t\t\t\t\t\t[passive]"
        #echo -e "\t-f|--FacebookDataExtractor \tExracts data from facebook  \t\t\t\t\t\t[passive]"
        #echo -e " -dBa | --Dorking \t\t\tRun popular dorking searches using Baidu search engine\t\t\t[Passive]"
        echo -e " -b  | --Banner Grabbing \t\tGain details about a system on a network\t\t\t\t[Semi-Passive]"
	echo -e " -dB | --Dorking \t\t\tRun popular dorking searches using Bing search engine\t\t\t[Passive]"
        echo -e " -dD | --Dorking \t\t\tRun popular dorking searches using Duck Duck Go search engine\t\t[Passive]"
        echo -e " -dG | --Dorking \t\t\tRun popular dorking searches using Google search engine\t\t\t[Passive]"
        echo -e " -M  | --MetaDataExtractor\t\tExracts data from files\t\t\t\t\t\t\t[Passive]"
        echo -e " -m  | --Google Map Request\t\tOpens google map to inputted location\t\t\t\t\t[Passive]"
        echo -e " -n  | --Name Server Enumeration \tLocating all DNS servers and records for a company\t\t\t[Semi-Passive]"
        echo -e " -s  | --Shodan  \t\t\tIoT devices check\t\t\t\t\t\t\t[Passive]"
        echo -e " -t  | --Text file recon \t\tChecks for intel in Robots.txt & Security.txt of domain\t\t\t[Passive]"
        echo -e " -w  | --Whois \t\t\t\tWhois URL check\t\t\t\t\t\t\t\t[Passive]"
}

#Main execution flow for v2.0 below here

if [[ "$doNotRunWarning" == "YES" ]]; then
	echo "Warning, a tool must be specified before utilies"
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#echo "both no"
	if [[ $chosenTool == "whoIs" ]]; then
		#WORKING AS OF 7/8/22
		#echo "value of chosenTool is $chosenTool"
		whoisUtil $argForTool
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" != "YES" ]]; then
	#echo "read equal yes, save equal no"
	if [[ $chosenTool == "whoIs" ]]; then
		#DEBUGGED AND WORKING AS OF 8/8/2022
		whoisUtil $fileToRead
	fi
elif [[ "$readFromFile" != "YES" ]] && [[ "$saveToFile" == "YES" ]];then
	#echo "read equal no, save equal yes"
	if [[ "$chosenTool" == "whoIs" ]]; then
		#echo "argForTool is $argForTool"
		#WORKING AS OF 8/8/2022
		whoisUtil $argForTool $fileToSaveTo
	fi
elif [[ "$readFromFile" == "YES" ]] && [[ "$saveToFile" == "YES" ]]; then
	#echo "read equal yes, save equal yes"
	if [[ "$chosenTool" == "whoIs" ]]; then
		whoisUtil $fileToRead $fileToSaveTo
	fi
else
	echo "Unkown values of read of save"
fi
